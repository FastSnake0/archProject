version: "3.2"

services:
# structurizr:
#   image: structurizr/lite
#   ports:
#     - 2525:2525
#   volumes:
#     - .:/usr/local/structurizr:z

####
####    DATA 
####

  db:
    image: postgres
    container_name: postgres_container
    environment:
      POSTGRES_USER: meow
      POSTGRES_PASSWORD: PWDmeow
      POSTGRES_DB: userdb
    volumes:
      - dbdata0:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d userdb -U meow" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - app-network

  mongo:
    image: mongo:5.0
    container_name: mongodb_container
    restart: on-failure
    networks:
      - app-network
    volumes:
      - mongodb:/data/db
      - ./init-scripts/mongo-init.sh:/docker-entrypoint-initdb.d/mongo-init.sh:ro
    ports:
      - '27017:27017'
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet

  cache:
    container_name: cache_container
    image: redis:6.2-alpine
    restart: always
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning 
    networks:
      - app-network
    volumes: 
      - cache:/data


####
####    SERVICES
####

  user_service:
    tty: true
    container_name: user_service
    build:
      context: .
      dockerfile: dockerfile_user
    environment:
      - DB_HOST=postgres_container
      - DB_PORT=5432
      - DB_LOGIN=meow
      - DB_PASSWORD=PWDmeow
      - DB_DATABASE=userdb
    depends_on:
      db:
        condition: service_healthy
    ports:
      - 8080:8080
    networks:
      - app-network

  post_service:
    tty: true
    container_name: post_service
    build:
      context: .
      dockerfile: dockerfile_post
    environment:
      - MONGO_HOST=mongodb_container
      - MONGO_PORT=27017
      - MONGO_DATABASE=arch
    depends_on:
      mongo:
        condition: service_healthy
    ports:
      - 8081:8080
    networks:
      - app-network

  chat_service:
    tty: true
    container_name: chat_service
    build:
      context: .
      dockerfile: dockerfile_chat
    environment:
      - MONGO_HOST=mongodb_container
      - MONGO_PORT=27017
      - MONGO_DATABASE=arch
    depends_on:
      mongo:
        condition: service_healthy
    ports:
      - 8082:8080
    networks:
      - app-network

  gateway_service:
    tty: true
    container_name: gateway_container
    build:
      context: .
      dockerfile: gateway_dockerfile
    environment:
      - JWT_KEY=0123456789ABCDEF0123456789ABCDEF
      - CACHE=cache_container:6379
      - USER_ADDRESS=http://user_service:8080
      - CHAT_ADDRESS=http://chat_service:8080
      - POSTS_ADDRESS=http://post_service:8080
    ports:
      - 8888:8888
    networks:
      - lab05-network



volumes:
  dbdata0:
  mongodb:
  cache:


networks:
  app-network:
    driver: "bridge"
    external: false

